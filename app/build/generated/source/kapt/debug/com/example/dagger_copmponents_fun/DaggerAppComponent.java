// Generated by Dagger (https://dagger.dev).
package com.example.dagger_copmponents_fun;

import com.example.core.MessageInteractor;
import com.example.first.FooModule;
import com.example.first.FooModule_ProvideFooFactory;
import com.example.second.FightersModule;
import com.example.second.FightersModule_ProvideFightersFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final FooModule fooModule;

  private final FightersModule fightersModule;

  private final DaggerAppComponent appComponent = this;

  private DaggerAppComponent(FooModule fooModuleParam, FightersModule fightersModuleParam) {
    this.fooModule = fooModuleParam;
    this.fightersModule = fightersModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  public static AppComponent create() {
    return new Builder().build();
  }

  private MessageInteractor messageInteractor() {
    return new MessageInteractor(FooModule_ProvideFooFactory.provideFoo(fooModule), FightersModule_ProvideFightersFactory.provideFighters(fightersModule));
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectInteractor(instance, messageInteractor());
    return instance;
  }

  public static final class Builder {
    private FooModule fooModule;

    private FightersModule fightersModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder subComponentsModule(SubComponentsModule subComponentsModule) {
      Preconditions.checkNotNull(subComponentsModule);
      return this;
    }

    public Builder fooModule(FooModule fooModule) {
      this.fooModule = Preconditions.checkNotNull(fooModule);
      return this;
    }

    public Builder fightersModule(FightersModule fightersModule) {
      this.fightersModule = Preconditions.checkNotNull(fightersModule);
      return this;
    }

    public AppComponent build() {
      if (fooModule == null) {
        this.fooModule = new FooModule();
      }
      if (fightersModule == null) {
        this.fightersModule = new FightersModule();
      }
      return new DaggerAppComponent(fooModule, fightersModule);
    }
  }
}
